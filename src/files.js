const fs = require("fs")

class contenedor {
    constructor (archivo){
        this.archivo = archivo
    }


    async save(obj){
    try{
        const contenido = await fs.promises.readFile(this.archivo, "utf-8")
        let id
        let timestamp = Date.now();
        const contenidoObj = JSON.parse(contenido)
        if (contenidoObj.length == 0){
            id = 1;
        }else{
            let nid = contenidoObj[contenidoObj.length-1].id
            id=parseInt(nid)+1
        }
            const newProduct = { id:id, timestamp:timestamp, ...obj}
            contenidoObj.push(newProduct)
            await fs.promises.writeFile(this.archivo, JSON.stringify(contenidoObj, null, 2));
    } catch(err){
        console.log(`Error,no se puede leer el archivo: ${err.message}`);
    }
    }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    async getById(num){
        try {
            const contenido = await fs.promises.readFile(this.archivo, "utf-8")
            const contenidoObj = JSON.parse(contenido)
            // console.log(contenidoObj)
            const byId = contenidoObj.find(byId => byId.id == num)
            //console.log(byId)
            return byId

        }catch(err){
            console.log(`Error,no se puede leer el archivo: ${err.message}`);
        }
    }

    //     getByIdSync(num){
    //     try {
    //         const contenido = fs.readFileSync(this.archivo, "utf-8")
    //         const contenidoObj = JSON.parse(contenido)
    //         // console.log(contenidoObj)
    //         const byId = contenidoObj.find(byId => byId.id === num)
    //         //console.log(byId)
    //         return byId

    //     }catch(err){
    //         console.log(`Error,no se puede leer el archivo: ${err.message}`);
    //     }
    // }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    async getAll() {
        try {
            const contenido = await fs.promises.readFile(this.archivo, "utf-8")
            const contenidoObj = JSON.parse(contenido)
            return contenidoObj;
        }catch (err) {
            throw new Error(`Error ${err.message}`)
        }
       //return contenidoObj; 
    }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    async deleteById(num){
        try {
            const contenido = await fs.promises.readFile(this.archivo, "utf-8")
            const contenidoObj = JSON.parse(contenido)
           
            const byId = contenidoObj.filter(item => item.id !== num)
            await fs.promises.writeFile(this.archivo, JSON.stringify(byId, null, 2), (err) => { });
            console.log("Producto Eliminado")

        }catch(err){
            console.log(`Error,no se puede leer el archivo: ${err.message}`);
        }
        
    }

    async deleteAll(){
        try {
            const contenido = await fs.promises.readFile(this.archivo, "utf-8")
            const contenidoObj = JSON.parse(contenido)
            const byId = contenidoObj.filter(item => item.id == "X")
            await fs.promises.writeFile(this.archivo, JSON.stringify(byId, null, 2), (err) => { });
            console.log("Eliminados todos los productos")

        }catch(err){
            console.log(`Error,no se puede leer el archivo: ${err.message}`);
        }
        
    }
}

module.exports = contenedor